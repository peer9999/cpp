#include <iostream>
#include <cstring>
#include <string>
#include <fstream>
#include <iterator> 
#include <map> 
#include <vector> 
#include <cstdio>
#include <algorithm>
using namespace std;

struct Node {
    char letter;
    int freq;
    string code;
    Node *left, *right;
};

Node *init(char, int, string);
void addnode(char, int, string, Node*&);
void del(Node*&);
void print(Node*&);

bool compare(const pair<char, int>& a, const pair<char, int>& b)
{
    return a.second > b.second;
}

int main()
{
    unsigned int i, j;
    string line;
    char letter;
    int freq;
    string text = "";
//    ifstream file("D:/Labs/Language/Lab5/text4.txt");
    ifstream file("input.txt");

    if (file.is_open()) {
        while (getline(file, line)) {
            text = text + line;
        }
    }
    file.close();

    vector<pair<char, int>> Maps;
    map<char, int> Map;

    for (i = 0; i < text.size(); i++) {
        Map[text[i]]++;
    }

    for (const pair<char, int>& i : Map) {
        Maps.push_back(i);
    }
    sort(Maps.begin(), Maps.end(), compare);
//    cout << Maps.size() << " " << tsize << endl;

    Node *tree = init(' ', 0, "0");

//print(tree);
//return 0;

    for (const pair<char, int>& map : Maps) {
        letter = map.first;
        freq   = map.second;
        addnode(letter, freq, "0", tree);
print(tree);
return 0;
    }
    print(tree);
    return 0;
}

Node *init(char symbol, int freq, string code) {
    Node *node;
    node         = new Node;
    node->letter = symbol;
    node->freq   = freq;
    node->code   = code;
    node->left   = NULL;
    node->right  = NULL;
    return node;
}

void addnode(char l, int f, string c, Node *&tree) {
    if (f < tree->freq) {
        if (tree->left != NULL) {
            addnode(l, f, "0", tree->left);
        }
        else {
            tree->left         = new Node;
            tree->left->letter = l;
            tree->left->freq   = f;
            tree->right->code += c;
            tree->left->left   = tree->left->right = NULL;
        }
    }
    if (f > tree->freq) {
        if (tree->right != NULL) {
            addnode(l, f, "1", tree->right);
        }
        else {
            tree->right         = new Node;
            tree->right->letter = l;
            tree->right->freq   = f;
            tree->right->code  += c;
            tree->right->left   = tree->right->right = NULL;
        }
    }
}

void del(Node *&tree) {
    if (tree != NULL) {
        del(tree->left);
        del(tree->right);
        delete tree;
    }
}

void print(Node *&tree) {
    if (tree != NULL) {
        print(tree->left);
        cout << tree->letter << " " << tree->freq << " " << tree->code << endl;
        print(tree->right);
    }
}
